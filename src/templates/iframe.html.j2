<!--

To add a map layer use create a key

To add a view to this map you will want to Site.getMarker and
will want to adjust the Map.data which populates the select input and legend.


-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>OSG Compute Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.8.0/dist/leaflet.css"
       integrity="sha512-hoalWLoI8r4UszCkZ5kL8vayOGVae1oxXe/2A4AO6J9+580uKHDO3JdHb7NzwwzK5xr/Fs0W40kiNHxM9vyTtQ=="
       crossorigin=""/>

    <script src="https://unpkg.com/leaflet@1.8.0/dist/leaflet.js"
       integrity="sha512-BB3hKbKWOc9Ez/TAwyWxNXeoV9c1v6FIeYiBieIWkpLjauysF18NzgR1MBNBXf8/KABdlkX68nAhlwcDFLGPCQ=="
       crossorigin=""></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/dom-to-image/2.6.0/dom-to-image.js" integrity="sha512-wUa0ktp10dgVVhWdRVfcUO4vHS0ryT42WOEcXjVVF2+2rcYBKTY7Yx7JCEzjWgPV+rj2EDUr8TwsoWF6IoIOPg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>

    <style>
        body {margin: 0;}

        #map { height: 100vh; width: 100vw; }

        #full-screen {
        padding: 8px;
        position: absolute;
        left: 10px;
        bottom: 10px;
        z-index: 1000;
        border-radius: 5px;
        border: #3a3a3a solid 1px;
    }

        #full-screen > img {
            height: 24px;
            width: 24px;
        }

        #selection-container {
            display: flex;
            flex-direction: column;
            position: absolute;
            top: 10px;
            right: 10px;
            z-index: 1000;
        }

        #legend {
            position: absolute;
            background-color: white;
            padding: 8px;
            bottom: 20px;
            right: 10px;
            z-index: 1000;
            border-radius: 5px;
            border: #3a3a3a solid 1px;
        }

        .select-container {
            border-radius: 5px;
            border: #3a3a3a solid 1px;
            background: white;
            margin-left: auto;
            margin-bottom: 5px;
        }

        .select-container > label {
            background: white;
            padding-left: 8px;
            font-size: 1rem;
            color: #3a3a3a;
        }

        .select-container > select {
            padding: 8px;
            font-size: 1rem;
            border: 0;
        }

        .popup {
            max-height: 400px;
            overflow-y: auto;
        }

        .entry-container {
            display: flex;
            margin-top: 10px;
        }

        .entry-container > img {
            height: 36px;
            width: 27px;
        }

        .entry-container > span {
            font-size: 1rem;
            margin: auto 0;
            padding-left: 10px;
        }

        .card-header {
            margin: 0;
        }

        .resource-group-header {
            border-radius: 5px;
            background: #3a3a3a;
            color: #dddddd;
            padding: 6px;
            margin: 10px 0 0 0;
        }

        .resource-container {
            border: 1px solid #ccc;
            padding: 6px;
            border-radius: 4px;
            margin: 1px 0;
            display: flex;
        }

        .resource-container > img {
            height: 16px;
            width: 16px;
        }

        .resource-container > span {
            padding-left: 8px;
        }

        #print-button {
            background: white;
            position: absolute;
            top: 10px;
            left: 55px;
            padding: 6px;
            font-size: 1rem;
            border-radius: 5px;
            border: #3a3a3a solid 1px;
            z-index: 1000;
        }
    </style>
</head>
<body>
    <main id="main">
        <div id="print-region">
            <div id="map"></div>
            <div id="legend" class="leaflet-container" hidden>
                <h2 class="card-header">Legend</h2>
                <hr>
                <div id="legend-items"></div>
            </div>
        </div>

        <button id="full-screen" onclick="toggleFullscreen()"><img alt="Outward arrows towards corners of square" src="../static/images/map/arrows-fullscreen.svg"/></button>

        <button id="print-button" onclick="downloadPNG()">Print as PNG</button>

        <div id="selection-container">
            <div id="site-container" class="leaflet-container select-container">
                <label for="site">Site</label>
                <select id="site"></select>
            </div>
            <div id="view-container" class="leaflet-container select-container">
                <label for="view">View</label>
                <select id="view"></select>
            </div>
        </div>
    </main>
</body>
<script>
    const compute_services = new Set(["CE", "Submit Node", "Connect", "GUMS Server", "Glidein factory", "VOMS Server", "Execution Endpoint"]);
    const storage_services = new Set(["Squid", "SRMv2", "XRootD cache server", "GridFtp", "XRootD component", "XRootD origin server", "SRMv1", "LFC", "Apache Server", "FTS"]);
    const network_services = new Set(["net.perfSONAR.Bandwidth", "net.perfSONAR.Latency"]);
    const ospool_facilities = new Set(['American Museum of Natural History', 'Arizona State University', 'Brookhaven National Laboratory', 'California Institute of Technology', 'Cinvestav', 'Clarkson University', 'Clemson University', 'Cybera', 'Fermi National Accelerator Laboratory', 'Florida State University', 'Georgia Institute of Technology', 'Georgia State University', 'Great Plains Network', 'IN2P3', 'INFN-T1', 'Illinois Institute of Technology', 'Indiana University', 'Kansas State University', 'Lancium', 'Lehigh University', 'Louisiana State University', 'Louisiana State University Health Sciences Center', 'New Mexico State University', 'Nikhef', 'North Dakota State University', 'Old Dominion University', 'Purdue University', 'Rice University', 'SURFsara', 'Southern Illinois University Edwardsville', 'Syracuse University', 'The College of New Jersey', 'Tufts University', 'Universidade Estadual Paulista', 'University of California San Diego', 'University of Chicago', 'University of Colorado', 'University of Connecticut', 'University of Illinois at Urbana Champaign', 'University of Michigan', 'University of Mississippi', 'University of Nebraska', 'University of Notre Dame', 'University of Oklahoma', 'University of Puerto Rico - Mayaguez', 'University of South Florida', 'University of Southern California', 'University of Tennessee Chattanooga', 'University of Texas at Austin', 'University of Utah', 'University of Wisconsin', 'Villanova University', 'Wayne State University', 'West Texas A&M University'])

    const iconConfig = {
        iconSize: [36,36],
        iconAnchor: [18, 36],
        popupAnchor: [0,-36],
        shadowUrl: "/static/images/map/small_shadow.svg",
        shadowAnchor: [12,30],
        shadowSize: [24,24]
    }

    const originIcon = L.icon({iconUrl: "/static/images/map/origin.svg", ...iconConfig})
    const cacheIcon = L.icon({iconUrl: "/static/images/map/cache.svg", ...iconConfig})
    const blueStarIcon = L.icon({iconUrl: "/static/images/map/star_blue.svg", ...iconConfig})
    const redStarIcon = L.icon({iconUrl: "/static/images/map/star_red.svg", ...iconConfig})
    const greenStarIcon = L.icon({iconUrl: "/static/images/map/star_green.svg", ...iconConfig})
    const purpleStarIcon = L.icon({iconUrl: "/static/images/map/star_purple.svg", ...iconConfig})
    const cacheAndOriginIcon = L.icon({
        iconUrl: "/static/images/map/cache_and_origin.svg",
        iconSize: [42,42],
        iconAnchor: [21, 42],
        popupAnchor: [0, -42],
        shadowUrl: "/static/images/map/large_shadow.svg",
        shadowAnchor: [12,30],
        shadowSize: [24,24]
    })

    downloadPNG = async () => {
        document.getElementsByClassName("leaflet-control-zoom")[0].hidden = true

        let dataUrl = await domtoimage.toPng(document.getElementById("print-region"))

        let link = document.createElement('a');
        link.download = 'OSG_Map.png';
        link.href = dataUrl;
        link.click();

        document.getElementsByClassName("leaflet-control-zoom")[0].hidden = false
    }

    toggleFullscreen = async () => {
        document.getElementById("main").requestFullscreen()
    }

    class Site {

        constructor({
            Resources: { Resource : resources },
            Site: { Latitude, Longitude, Name : siteName },
            Facility: { Name: facilityName },
            GroupName: resourceGroupName
        }) {
            this.resourceGroups = {}
            this.resourceGroups[resourceGroupName] = resources
            this.resources = resources
            this.latitude = Latitude
            this.longitude = Longitude
            this.name = name
            this.facilityName = facilityName
            this.siteName = siteName
        }

        addResourceGroup({
            Resources: { Resource : resources },
            GroupName: resourceGroupName
        }) {
            this.resourceGroups[resourceGroupName] = resources
        }

        getMarker(view) {
            let icon;

            if(view === "ComputevsStorage"){
                if(this.isCompute && this.isStorage){
                    icon = greenStarIcon
                } else if(this.isCompute){
                    icon = blueStarIcon
                } else if(this.isStorage){
                    icon = purpleStarIcon
                }

            } else if(view === "EduvsOther"){
                if(this.isEDU){
                    icon = blueStarIcon
                } else {
                    icon = greenStarIcon
                }

            } else if(view === "CCStar"){
                if(this.isCCStar){
                    icon = redStarIcon
                }

            } else if(view === "OpenScienceDataFederation") {
                if (this.isOSDFOrigin && this.isOSDFCache) {
                    icon = cacheAndOriginIcon
                } else if (this.isOSDFOrigin) {
                    icon = originIcon
                } else if (this.isOSDFCache) {
                    icon = cacheIcon
                }

            } else if(view === "OSPool"){
                if (this.isOSPool){
                    icon = greenStarIcon
                }

            } else {
                icon = greenStarIcon
            }

            if(!icon){
                return null
            }

            this.marker = L.marker([this.latitude, this.longitude], {icon: icon}).bindPopup(this.displayHTML);
            this.marker.site = this

            this.popup = this.marker.getPopup()
            this.popup.site = this

            return this.marker
        }

        get services() {
            if( !this._services ){
                this._services = this.resources.flatMap( resource => resource?.Services?.Service ? resource?.Services?.Service : [] )
            }
            return this._services
        }

        get displayHTML() {
            let container = document.createElement("div")
            container.classList.add("popup")

            let header = document.createElement("h4")
            header.textContent = this.facilityName
            header.classList.add("card-header")
            container.appendChild(header)

            container.appendChild(document.createElement("hr"))

            for(const [resourceGroupName, resourceGroupResources] of Object.entries(this.resourceGroups)){
                let resourceGroupNode = document.createElement("h4")
                resourceGroupNode.innerText = "Resource Group: " + resourceGroupName
                resourceGroupNode.classList.add("resource-group-header")
                container.appendChild(resourceGroupNode)

                for(const resource of resourceGroupResources){
                    let resourceContainerNode = document.createElement("div")
                    resourceContainerNode.classList.add("resource-container")

                    let imgNode = document.createElement("img")
                    imgNode.src = "/static/images/map/server_simple.svg"
                    imgNode.alt = "Image of Server"

                    let resourceNode = document.createElement("span")
                    resourceNode.innerText = resource?.Name
                    resourceNode.classList.add("resource-header")

                    resourceContainerNode.appendChild(imgNode)
                    resourceContainerNode.appendChild(resourceNode)

                    container.appendChild(resourceContainerNode)
                }
            }

            return container
        }

        get isCCStar() {
            if( !this._isCCStar ){
                this._isCCStar = this.resources.flatMap( resource => resource?.Tags?.Tag ? resource?.Tags?.Tag : [] )
                    .some(tags => tags.includes("CC*"))
            }
            return this._isCCStar
        }

        get isEDU() {
            if( !this._isEDU ){
                this._isEDU = this.resources.some(({FQDN}) => FQDN.endsWith(".edu"))
            }
            return this._isEDU
        }

        get isCompute() {
            if( !this._isCompute ){
                this._isCompute = this.services.some(({Name: name}) => compute_services.has(name))
            }
            return this._isCompute
        }

        get isStorage() {
            if( !this._isStorage ){
                this._isStorage = this.services.some(({Name: name}) => storage_services.has(name))
            }
            return this._isStorage
        }

        get isNetwork() {
            if (!this._isNetwork) {
                this._isNetwork = this.services.some(({Name: name}) => network_services.has(name))
            }
            return this._isNetwork
        }

        get isOSDFCache() {
            if( !this._isOSDFCache ){
                this._isOSDFCache = this.services.some(({Name: name}) => name === "XRootD cache server")
            }
            return this._isOSDFCache
        }

        get isOSDFOrigin(){
            if( !this._isOSDFOrigin ){
                this._isOSDFOrigin = this.services.some(({Name: name}) => name === "XRootD origin server")
            }
            return this._isOSDFOrigin
        }

        get isOSPool(){
            if( !this._isOSPool ){
                this._isOSPool = ospool_facilities.has(this.facilityName )
            }
            return this._isOSPool
        }
    }

    class Map {

        constructor() {

            // Defaults
            let latitude = 38.96
            let longitude = -92.37
            let zoom = 4

            // Check for zoom and location inputs
            if(window.location.hash){
                let viewportComponents = window.location.hash.split("#")[1].split("|");
                [latitude, longitude] = viewportComponents[0].split(',')
                zoom = viewportComponents[1]
            }

            // Initialize the map
            this.map = L.map('map').setView([latitude, longitude], zoom);
            L.tileLayer('https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token={accessToken}', {
                attribution: 'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors, Imagery © <a href="https://www.mapbox.com/">Mapbox</a>',
                maxZoom: 18,
                id: 'mapbox/streets-v11',
                tileSize: 512,
                zoomOffset: -1,
                accessToken: 'pk.eyJ1IjoidGFraW5nZHJha2UiLCJhIjoiY2wya3IyZGNvMDFyOTNsbnhyZjBteHRycSJ9.g6tRaqN8_iJxHgAQKNP6Tw'
            }).addTo(this.map);

            // Initialize the legend nodes
            this.legendNode = document.getElementById("legend")
            this.legendItemsNode = document.getElementById("legend-items")
        }

        _updateLegend(legend, layer) {
            this.legendNode.hidden = false

            while (this.legendItemsNode.firstChild) {
                this.legendItemsNode.removeChild(this.legendItemsNode.firstChild)
            }

            Object.entries(legend).forEach(([iconLabel, iconUrl]) => {
                let entryContainerNode = document.createElement("div")
                entryContainerNode.classList.add("entry-container")
                this.legendItemsNode.appendChild(entryContainerNode)

                let imgNode = document.createElement("img")
                let labelNode = document.createElement("span")
                let countNode = document.createElement("span")
                entryContainerNode.appendChild(imgNode)
                entryContainerNode.appendChild(labelNode)
                entryContainerNode.appendChild(countNode)

                imgNode.src = iconUrl
                imgNode.alt = "Icon for " + iconLabel

                labelNode.innerText = iconLabel

                // Count values in layer that match iconUrl with current legend item
                // In this case iconUrl is a proxy for Site Category
                let siteCount = Object.values(layer._layers)
                    .reduce((og, v) => {
                        if(v.options.icon.options.iconUrl === iconUrl){
                            return og + 1
                        } else {
                            return og
                        }
                    }, 0)

                countNode.innerText = `( ${siteCount} )`
            })

            this.legendNode.hidden = false
        }

        _updateLayer(layer) {
            // Remove previous layer
            if (this.currentLayer) {
                this.map.removeLayer(this.currentLayer)
            }

            // Update to new layer
            this.currentLayer = layer
            this.currentLayer.addTo(this.map)
        }

        update(layer, legend) {
            this._updateLayer(layer)
            this._updateLegend(legend, layer)
        }
    }

    class Select {
        constructor(id) {
            this.node = document.getElementById(id)
        }

        addOptions(options) {
            // Remove previous options
            while(this.node.firstChild){
                this.node.removeChild(this.node.firstChild)
            }
            // Add new options
            options.forEach(([value, text]) => {
                let optionNode = document.createElement("option")
                optionNode.value = value
                optionNode.innerText = text
                this.node.appendChild(optionNode)
            })
        }
    }


    class SitemapPage {

        constructor() {
            this.fetchSites()

            this.metaData = {
                "OSGSites" : {
                    "longText" : "OSG Sites",
                    "legend" : {
                        "OSG Site": greenStarIcon?.options?.iconUrl,
                    }
                },
                "ComputevsStorage" : {
                    "longText" : "Compute and Storage",
                    "legend" : {
                        "Compute Only": blueStarIcon?.options?.iconUrl,
                        "Storage Only": purpleStarIcon?.options?.iconUrl,
                        "Compute And Storage": greenStarIcon?.options?.iconUrl,
                    }
                },
                "EduvsOther" : {
                    "longText" : "EDU sites and others",
                    "legend" : {
                        "EDU Site": blueStarIcon?.options?.iconUrl,
                        "Others": greenStarIcon?.options?.iconUrl,
                    }
                },
                "CCStar" : {
                    "longText" : "CC* Sites",
                    "legend" : {
                        "CC* Site": redStarIcon?.options?.iconUrl
                    }
                },
                "OpenScienceDataFederation" : {
                    "longText" : "Open Science Data Federation",
                    "legend" : {
                        "Origin": originIcon?.options?.iconUrl,
                        "Cache": cacheIcon?.options?.iconUrl,
                        "Cache and Origin": cacheAndOriginIcon?.options?.iconUrl,
                    }
                },
                "OSPool" : {
                    "longText" : "OSPool Contributors",
                    "legend" : {
                        "OSPool Contributor" : greenStarIcon?.options?.iconUrl
                    }
                }
            }

            this.leafletMap = new Map()
            this.leafletMap.map.on("popupopen", (e) => {
                this.siteSelect.value = e.popup.site.siteName
            })

            this.viewSelect = new Select("view")
            this.viewSelect.addOptions(
                Object.entries(this.metaData).map(([key, value]) => [key, value?.longText])
            )
            this.viewSelect.node.value = this.view
            this.viewSelect.node.addEventListener("change", () => {
                history.pushState({"data": "data"}, "", "/map/iframe?view=" + this.viewSelect.node.value)
                this.update()
            })

            this.siteSelect = new Select("site")
            this.siteSelect.node.addEventListener("change", () => {
                this.sites[this.siteSelect.node.value].marker.openPopup()
            })

            this.layers = {}
        }

        get view() {
            let searchParams = new URLSearchParams(window.location.search);
            return searchParams.get("view") ? searchParams.get("view") : "OSGSites"
        }

        get layer(){
            if( !(this.view in this.layers) ){
                this.layers[this.view] = L.layerGroup(this.markers)
            }
            return this.layers[this.view]
        }

        get markers() {
            return Object.entries(this.sites).map(([name, site]) => site.getMarker(this.view)).filter(icon => icon !== null)
        }

        update() {
            this.siteSelect.addOptions(
                Object.values(this.layer._layers).map(({ site })=> [site.siteName, site.siteName])
            )
            this.leafletMap.update(this.layer, this.metaData[this.view].legend)
        }

        async fetchSites() {
            let response = await fetch("/api/resource_group_summary")
            let resourceGroupJson = await response.json()

            let sites = {}
            Object.entries(resourceGroupJson).forEach(([key, value]) => {
                if(value?.Site?.Name in sites){
                    sites[value?.Site?.Name].addResourceGroup(value)
                } else {
                    sites[value?.Site?.Name] = new Site(value)
                }
            })

            this.sites = sites
            this.update()
        }
    }

    const page = new SitemapPage()
</script>
</html>




